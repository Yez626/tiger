---

name: cicd

on: [push]

jobs:
    build:
        runs-on: ubuntu-20.04
        outputs:
            tag: ${{ steps.output.outputs.tag }}
        steps:
            - name: Checkout repository
              uses: actions/checkout@v2
            - name: update joj-elephant in poetry.lock
              run: |
                  ELEPHANT_REF=$(git ls-remote --heads https://github.com/joint-online-judge/elephant.git refs/heads/master | awk '{print $1}')
                  echo $ELEPHANT_REF
                  ELEPHANT_URL_LINE_NO=$(awk '/joint-online-judge\/elephant.git/{ print NR; exit }' poetry.lock)
                  echo $ELEPHANT_URL_LINE_NO
                  ELEPHANT_REF_LINE_NO=$(($ELEPHANT_URL_LINE_NO-2))
                  echo $ELEPHANT_REF_LINE_NO
                  sed -i "${ELEPHANT_REF_LINE_NO}s/.*/resolved_reference = \"$ELEPHANT_REF\"/" poetry.lock
                  git --no-pager diff
            - name: update joj-horse-client in poetry.lock
              run: |
                  HORSE_PYTHON_CLIENT_REF=$(git ls-remote --heads https://github.com/joint-online-judge/horse-python-client.git refs/heads/master | awk '{print $1}')
                  echo $HORSE_PYTHON_CLIENT_REF
                  HORSE_PYTHON_CLIENT_URL_LINE_NO=$(awk '/joint-online-judge\/horse-python-client.git/{ print NR; exit }' poetry.lock)
                  echo $HORSE_PYTHON_CLIENT_URL_LINE_NO
                  HORSE_PYTHON_CLIENT_REF_LINE_NO=$(($HORSE_PYTHON_CLIENT_URL_LINE_NO-2))
                  echo $HORSE_PYTHON_CLIENT_REF_LINE_NO
                  sed -i "${HORSE_PYTHON_CLIENT_REF_LINE_NO}s/.*/resolved_reference = \"$HORSE_PYTHON_CLIENT_REF\"/" poetry.lock
                  git --no-pager diff
            - name: commit and push updated poetry.lock
              uses: EndBug/add-and-commit@v9
              with:
                  default_author: github_actions
                  message: 'chore: update joj-elephant and horse-python-client in poetry.lock'
            - name: Set up Go
              uses: actions/setup-go@v2
              with:
                  go-version: ^1.17.7
            - name: Build runner
              run: make -C runner
            - name: Set up Docker Buildx
              uses: docker/setup-buildx-action@v1
            - name: Login to Docker Hub
              uses: docker/login-action@v1
              with:
                  registry: ghcr.io
                  username: ${{ github.actor }}
                  password: ${{ secrets.GITHUB_TOKEN }}
            - name: Extract metadata (tags, labels) for Docker
              uses: docker/metadata-action@v3
              id: meta
              with:
                  images: ghcr.io/joint-online-judge/tiger
                  flavor: |
                      latest=${{ github.event_name == 'push' && github.ref == 'refs/heads/master' }}
            - name: Set output
              id: output
              run: |
                  TAGS="${{ steps.meta.outputs.tags }}"
                  echo "$TAGS"
                  TAG="${TAGS%%$'\n'*}"
                  echo "$TAG"
                  echo "::set-output name=tag::$TAG"
            - name: Build and push Docker image
              id: docker_build
              uses: docker/build-push-action@v2
              with:
                  context: .
                  push: true
                  tags: ${{ steps.meta.outputs.tags }}
                  labels: ${{ steps.meta.outputs.labels }}
                  cache-from: type=gha
                  cache-to: type=gha,mode=max
            - name: Build and push Docker image with PyTest
              if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/master' }}
              id: docker_build_pytest
              uses: docker/build-push-action@v2
              with:
                  context: .
                  push: true
                  build-args: |
                      PYTEST=1
                  tags: ghcr.io/joint-online-judge/tiger:test
                  labels: ${{ steps.meta.outputs.labels }}
                  cache-from: type=gha
                  cache-to: type=gha,mode=max
    test:
        needs: build
        runs-on: ubuntu-20.04
        steps:
            - name: Checkout repository
              uses: actions/checkout@v2
            - name: Checkout joj-deploy-lite repository
              uses: actions/checkout@v2
              with:
                  repository: joint-online-judge/joj-deploy-lite
                  path: joj-deploy-lite
                  ref: master
            - name: Start docker compose
              env:
                  TIGER_IMAGE: ${{ needs.build.outputs.tag }}
              run: |
                  echo $TIGER_IMAGE
                  export TIGER_TAG=${TIGER_IMAGE##*:}
                  echo $TIGER_TAG
                  cd joj-deploy-lite
                  bash ./start.sh lite
                  sleep 20
                  docker exec joj2-rabbitmq rabbitmqctl list_vhosts
                  docker ps
            - name: Check rabbitmq docker logs
              if: always()
              run: |
                  docker logs joj2-rabbitmq
            - name: Test and Generate coverage report
              if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/master' }}
              run: |
                  sleep 10
                  docker exec joj2-tiger-1 /bin/bash -c "pytest -svv --cov=./ --cov-report=xml"
                  docker cp joj2-tiger-1:/root/coverage.xml .
                  docker exec joj2-tiger-1 /bin/bash -c "/root/runner/runner ls -lha"
            - name: Check tiger-1 docker logs
              if: always()
              run: |
                  docker logs joj2-tiger-1
            - name: Check rabbitmq docker logs
              if: always()
              run: |
                  docker logs joj2-rabbitmq
            - name: Upload coverage to Codacy
              uses: codacy/codacy-coverage-reporter-action@v1
              with:
                  project-token: ${{ secrets.CODACY_PROJECT_TOKEN }}
                  coverage-reports: coverage.xml
            - name: Upload coverage to Codecov
              uses: codecov/codecov-action@v1
              with:
                  token: ${{ secrets.CODECOV_TOKEN }}
                  fail_ci_if_error: true
    remote-ssh-command:
        if: github.event_name == 'push' && (github.ref == 'refs/heads/master')
        needs: test
        runs-on: ubuntu-20.04
        steps:
            - name: executing remote ssh commands using ssh key
              uses: appleboy/ssh-action@master
              with:
                  host: ${{ secrets.HOST }}
                  username: ${{ secrets.USERNAME }}
                  key: ${{ secrets.KEY }}
                  port: ${{ secrets.PORT }}
                  script: |
                      cd ~/joj-deploy
                      git pull
                      ./start.sh prod
                      docker image prune -f
